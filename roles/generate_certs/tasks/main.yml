- name: create initial serial file
  shell: echo "00" | tee files/vm/certs/serial.txt
  args:
    creates: files/vm/certs/serial.txt

- name: create initial index file
  command: touch files/vm/certs/ca_index.txt creates=files/vm/certs/ca_index.txt

- name: copy files to remote
  copy: src={{ item }} dest=files/vm/certs/{{ item }}
  with_items:
    - ca_config.cfg
    - ee_config.cfg

- name: create new CA
  command: |
    openssl req -new \
      -x509 \
      -days 3650 \
      -extensions v3_ca \
      -config files/vm/certs/ca_config.cfg \
      -passout pass:secret \
      -keyout files/vm/certs/ca.key \
      -subj "/O=OpenConext CA" \
      -out files/vm/certs/{{ tls.bundle_name }} creates=files/vm/certs/ca.key

- name: generate CSR, generating the private key on the fly
  command: |
    openssl req -new \
      -nodes \
      -config files/vm/certs/ee_config.cfg \
      -out files/vm/certs/server.csr \
      -keyout files/vm/certs/{{ tls.key_name }} \
      -batch \
      creates=files/vm/certs/{{ tls.key_name }}

- name: sign with the CA
  command: |
    openssl ca \
      -name OpenConext \
      -notext \
      -config files/vm/certs/ca_config.cfg \
      -cert files/vm/certs/{{ tls.bundle_name }} \
      -keyfile files/vm/certs/ca.key \
      -passin pass:secret \
      -in files/vm/certs/server.csr \
      -days 1825 \
      -batch \
      -outdir files/vm/certs \
      -out files/vm/certs/{{ tls.crt_name }} creates=files/vm/certs/{{ tls.crt_name }}

- name: encrypt the private key
  shell: |
    scripts/encrypt-file.sh -f files/vm/certs/{{ tls.key_name }} creates=files/vm/certs/{{ tls.key_name }}.encrypted
  register: encrypted_key

- name: create encrypted key file
  copy: content={{ encrypted_key.stdout }} dest=files/vm/certs/{{ tls.key_name }}.encrypted force=no

- name: generate keypairs for SP's
  command: |
    openssl req \
      -subj '/CN={{ item.cn }}/OU=Services/O=OpenConext/C=NL/' \
      -newkey rsa:2048 \
      -new \
      -x509 \
      -days 3652 \
      -nodes \
      -out files/{{ item.dest }}/certs/{{ item.cert_name }}.crt \
      -keyout files/{{ item.dest }}/certs/{{ item.cert_name }}.pem creates=files/{{ item.dest }}/certs/{{ item.cert_name }}.pem
  with_items:
    - {cn: Api, cert_name: api, dest: java-vm}
    - {cn: Apis, cert_name: apis, dest: java-vm}
    - {cn: Engine, cert_name: engineblock, dest: php-vm}

- name: convert the sp key to pkcs8 so it plays well with java
  command: |
    openssl pkcs8 \
      -topk8 \
      -nocrypt \
      -in files/java-vm/certs/{{ item }}.pem \
      -out files/java-vm/certs/{{ item }}_pkcs8.pem creates=files/java-vm/certs/{{ item }}_pkcs8.pem
  with_items:
    - api
    - apis

- name: encrypt the private key for api
  shell: |
    scripts/encrypt-file.sh -f files/java-vm/certs/api_pkcs8.pem creates=files/java-vm/certs/api_pkcs8.pem.encrypted
  register: "encrypted_api_key"

- name: encrypt the private key for apis
  shell: |
    scripts/encrypt-file.sh -f files/java-vm/certs/apis_pkcs8.pem creates=files/java-vm/certs/apis_pkcs8.pem.encrypted
  register: "encrypted_apis_key"

- name: encrypt the private key for engineblock
  shell: |
    scripts/encrypt-file.sh -f files/php-vm/certs/engineblock.pem creates=files/php-vm/certs/engineblock.pem.encrypted
  register: "encrypted_engineblock_key"

- name: create encrypted key file for api for engineblock
  copy: content={{ encrypted_api_key.stdout }} dest=files/java-vm/certs/api_pkcs8.pem.encrypted force=no

- name: create encrypted key file for apis for engineblock
  copy: content={{ encrypted_apis_key.stdout }} dest=files/java-vm/certs/apis_pkcs8.pem.encrypted force=no

- name: create encrypted key file for engineblock
  copy: content={{ encrypted_engineblock_key.stdout }} dest=files/php-vm/certs/engineblock.pem.encrypted force=no
