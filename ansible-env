#!/bin/bash
# USAGE: ./ansible-env [env-name] [playbook-file] [remote username]
set -e

ENVIRONMENTS=("vm" "test")
# the way to check if an array contains an element seems so pathetic in bash that I rather use this if below.
if [ "$1" != 'vm' ] && [ "$1" != 'test' ]; then
  echo "The environment $1 is unknown to us";
  exit 1
fi

ANSVER=`ansible --version|head -1|cut -d " " -f 2`
ANSVER1=`echo $ANSVER | cut -d '.' -f 1`
ANSVER2=`echo $ANSVER | cut -d '.' -f 2`
if [ $ANSVER1 -le 1 -a $ANSVER2 -lt 8 ]; then
	echo "Requires at least Ansible 1.8"
	exit 1
fi

KEYSTORE_DIR="$HOME/.decrypted_openconext_keystore_$1"
mkdir -p "$KEYSTORE_DIR"
# empty contents if the directory pre-existed
rm -rf "$KEYSTORE_DIR/*"

if [ "$1" == 'vm' ]; then
  # we can read the gpg passphrase from the file
  gpg --batch --quiet --passphrase-file gpg/passphrase.txt --decrypt "gpg/tarred_and_crypted_keystores/$1.tar.gpg" | tar -x -C "$KEYSTORE_DIR"
  if ([ ! -f "$KEYSTORE_DIR/meta" ] || [ ! -f "$KEYSTORE_DIR/1" ]);
    then
      echo "GPG decryption failed! Did you import gpg/vm.key into your GPG Keychain?"
      exit 1
  fi
  # no need to provide the username when targeting vagrant: it's always the same.
  ansible-playbook -i "inventory/$1" --private-key `pwd`/.vagrant/machines/openconext-vm/virtualbox/private_key  -u vagrant "$2"
else
  gpg --batch --quiet --decrypt "gpg/tarred_and_crypted_keystores/$1.tar.gpg" | tar -x -C "$KEYSTORE_DIR"
  ansible-playbook -i "inventory/$1" -u "$3" -K "$2"
fi
